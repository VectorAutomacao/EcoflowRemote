package view;

import control.ControlarAplicativo;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.SerialCom;

public class TelaPrincipal extends javax.swing.JFrame {
    
    //Controle
    private static ControlarAplicativo controleAplicativo = new ControlarAplicativo();
    //Variavel de controle da notificação de status do programa
    private static int flagStatus = 0;
    //Threads
    Thread tSeleciona;
    Thread tAlterar;
    Thread tPadrao;
    Thread tStatus;
    

    public TelaPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        status();
        listaSerialCom();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        lbPorta = new javax.swing.JLabel();
        cbPortas = new javax.swing.JComboBox<>();
        lbSlaveadd = new javax.swing.JLabel();
        lbInitialregister = new javax.swing.JLabel();
        lbInitialinput = new javax.swing.JLabel();
        lbMaxpulses = new javax.swing.JLabel();
        lbRegsize = new javax.swing.JLabel();
        lbBaudrate = new javax.swing.JLabel();
        lbStopbits = new javax.swing.JLabel();
        lbParity = new javax.swing.JLabel();
        lbFormat = new javax.swing.JLabel();
        btnAplicar = new javax.swing.JButton();
        btnPadrao = new javax.swing.JButton();
        txtSlaveadd = new javax.swing.JTextField();
        txtInitialRegister = new javax.swing.JTextField();
        txtInitialInput = new javax.swing.JTextField();
        txtMaxpulses = new javax.swing.JTextField();
        txtRegSize = new javax.swing.JTextField();
        txtBaudrate = new javax.swing.JTextField();
        txtParity = new javax.swing.JTextField();
        txtFormat = new javax.swing.JTextField();
        txtStopBits = new javax.swing.JTextField();
        btnFinalizar = new javax.swing.JButton();
        btnSelecionar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnLeitura = new javax.swing.JButton();
        lbStatus = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        jToggleButton1.setText("jToggleButton1");

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ECOflow v0.7.2");
        setIconImages(null);
        setName("framePrincipal"); // NOI18N
        setResizable(false);

        lbPorta.setText("Selecionar Porta:");

        cbPortas.setNextFocusableComponent(btnSelecionar);

        lbSlaveadd.setText("Slaveadd:");

        lbInitialregister.setText("Initialregister:");

        lbInitialinput.setText("Initialinput:");

        lbMaxpulses.setText("Maxpulses:");

        lbRegsize.setText("Regsize:");

        lbBaudrate.setText("Baudrate:");

        lbStopbits.setText("Stopbits:");

        lbParity.setText("Parity:");

        lbFormat.setText("Format:");

        btnAplicar.setMnemonic('A');
        btnAplicar.setText("Aplicar");
        btnAplicar.setEnabled(false);
        btnAplicar.setNextFocusableComponent(btnLeitura);
        btnAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAplicarActionPerformed(evt);
            }
        });
        btnAplicar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnAplicarKeyReleased(evt);
            }
        });

        btnPadrao.setMnemonic('d');
        btnPadrao.setText("Padrão");
        btnPadrao.setEnabled(false);
        btnPadrao.setNextFocusableComponent(btnAplicar);
        btnPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPadraoActionPerformed(evt);
            }
        });
        btnPadrao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnPadraoKeyReleased(evt);
            }
        });

        txtSlaveadd.setEnabled(false);
        txtSlaveadd.setNextFocusableComponent(btnPadrao);
        txtSlaveadd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSlaveaddFocusGained(evt);
            }
        });
        txtSlaveadd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSlaveaddKeyTyped(evt);
            }
        });

        txtInitialRegister.setEnabled(false);
        txtInitialRegister.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInitialRegisterFocusGained(evt);
            }
        });

        txtInitialInput.setEnabled(false);
        txtInitialInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInitialInputFocusGained(evt);
            }
        });

        txtMaxpulses.setEnabled(false);
        txtMaxpulses.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMaxpulsesFocusGained(evt);
            }
        });

        txtRegSize.setEnabled(false);
        txtRegSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRegSizeFocusGained(evt);
            }
        });

        txtBaudrate.setEnabled(false);
        txtBaudrate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBaudrateFocusGained(evt);
            }
        });

        txtParity.setEnabled(false);
        txtParity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtParityFocusGained(evt);
            }
        });

        txtFormat.setEnabled(false);
        txtFormat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFormatFocusGained(evt);
            }
        });

        txtStopBits.setEnabled(false);
        txtStopBits.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStopBitsFocusGained(evt);
            }
        });

        btnFinalizar.setMnemonic('F');
        btnFinalizar.setText("Finalizar");
        btnFinalizar.setEnabled(false);
        btnFinalizar.setNextFocusableComponent(cbPortas);
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });
        btnFinalizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnFinalizarKeyPressed(evt);
            }
        });

        btnSelecionar.setMnemonic('S');
        btnSelecionar.setText("Selecionar");
        btnSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarActionPerformed(evt);
            }
        });
        btnSelecionar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnSelecionarKeyReleased(evt);
            }
        });

        btnAtualizar.setMnemonic('t');
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setNextFocusableComponent(cbPortas);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });
        btnAtualizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAtualizarKeyPressed(evt);
            }
        });

        btnLeitura.setMnemonic('e');
        btnLeitura.setText("Leituras");
        btnLeitura.setEnabled(false);
        btnLeitura.setNextFocusableComponent(btnFinalizar);
        btnLeitura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeituraActionPerformed(evt);
            }
        });
        btnLeitura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnLeituraKeyReleased(evt);
            }
        });

        lbStatus.setBackground(new java.awt.Color(255, 255, 255));
        lbStatus.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbStatus.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 2, 2, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPorta)
                            .addComponent(btnFinalizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAtualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelecionar))
                            .addComponent(cbPortas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbSlaveadd)
                            .addComponent(lbInitialinput)
                            .addComponent(lbInitialregister)
                            .addComponent(lbMaxpulses)
                            .addComponent(lbRegsize)
                            .addComponent(lbBaudrate)
                            .addComponent(lbStopbits)
                            .addComponent(lbParity)
                            .addComponent(lbFormat))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInitialRegister)
                            .addComponent(txtMaxpulses)
                            .addComponent(txtRegSize)
                            .addComponent(txtBaudrate)
                            .addComponent(txtParity)
                            .addComponent(txtStopBits)
                            .addComponent(txtFormat)
                            .addComponent(txtSlaveadd)
                            .addComponent(txtInitialInput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLeitura, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(btnAplicar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPadrao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lbStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jSeparator2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPorta)
                    .addComponent(cbPortas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtualizar)
                    .addComponent(btnSelecionar)
                    .addComponent(btnFinalizar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSlaveadd)
                    .addComponent(btnPadrao)
                    .addComponent(txtSlaveadd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbInitialregister)
                    .addComponent(btnAplicar)
                    .addComponent(txtInitialRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbInitialinput)
                    .addComponent(txtInitialInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLeitura))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMaxpulses)
                    .addComponent(txtMaxpulses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbRegsize)
                    .addComponent(txtRegSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbBaudrate)
                    .addComponent(txtBaudrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbStopbits)
                    .addComponent(txtStopBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbParity)
                    .addComponent(txtParity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbFormat)
                    .addComponent(txtFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnPadrao.getAccessibleContext().setAccessibleDescription("Aplica os valores padrões de configurações");
        btnSelecionar.getAccessibleContext().setAccessibleDescription("");
        btnAtualizar.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAplicarActionPerformed
        alterar();
    }//GEN-LAST:event_btnAplicarActionPerformed

    private void btnPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPadraoActionPerformed
        padrao();
    }//GEN-LAST:event_btnPadraoActionPerformed

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed
        limpar();
        finalizar();
    }//GEN-LAST:event_btnFinalizarActionPerformed

    private void btnSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarActionPerformed
        selecionar();
    }//GEN-LAST:event_btnSelecionarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        listaSerialCom();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnLeituraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeituraActionPerformed
        leitura();
    }//GEN-LAST:event_btnLeituraActionPerformed

    private void btnAtualizarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAtualizarKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            listaSerialCom();
        }
    }//GEN-LAST:event_btnAtualizarKeyPressed

    private void btnFinalizarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFinalizarKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            limpar();
            finalizar();
        }
    }//GEN-LAST:event_btnFinalizarKeyPressed

    private void txtSlaveaddKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSlaveaddKeyTyped
        String caracteres = "0987654321";//String com caractes validos
        //Verifica se caracter e valido
        if (!caracteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSlaveaddKeyTyped

    private void btnSelecionarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSelecionarKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            selecionar();
        }
    }//GEN-LAST:event_btnSelecionarKeyReleased

    private void btnAplicarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAplicarKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            alterar();
        }
    }//GEN-LAST:event_btnAplicarKeyReleased

    private void btnPadraoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnPadraoKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            padrao();
        }
    }//GEN-LAST:event_btnPadraoKeyReleased

    private void btnLeituraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnLeituraKeyReleased
        if (evt.getKeyCode() == evt.VK_ENTER) {
            leitura();
        }
    }//GEN-LAST:event_btnLeituraKeyReleased

    private void txtSlaveaddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSlaveaddFocusGained
        txtSlaveadd.setText("");
    }//GEN-LAST:event_txtSlaveaddFocusGained

    private void txtInitialRegisterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInitialRegisterFocusGained
        txtInitialRegister.setText("");
    }//GEN-LAST:event_txtInitialRegisterFocusGained

    private void txtInitialInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInitialInputFocusGained
        txtInitialInput.setText("");
    }//GEN-LAST:event_txtInitialInputFocusGained

    private void txtMaxpulsesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaxpulsesFocusGained
        txtMaxpulses.setText("");
    }//GEN-LAST:event_txtMaxpulsesFocusGained

    private void txtRegSizeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRegSizeFocusGained
        txtRegSize.setText("");
    }//GEN-LAST:event_txtRegSizeFocusGained

    private void txtBaudrateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBaudrateFocusGained
        txtBaudrate.setText("");
    }//GEN-LAST:event_txtBaudrateFocusGained

    private void txtStopBitsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStopBitsFocusGained
        txtStopBits.setText("");
    }//GEN-LAST:event_txtStopBitsFocusGained

    private void txtParityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtParityFocusGained
        txtParity.setText("");
    }//GEN-LAST:event_txtParityFocusGained

    private void txtFormatFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFormatFocusGained
        txtFormat.setText("");
    }//GEN-LAST:event_txtFormatFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    //**************************************************************************
    //Icone da janela
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ECOFlow.png")));
    }

    //**************************************************************************
    //Lista de portas de comunicação ativas
    private void listaSerialCom() {
        DefaultComboBoxModel comboModel = (DefaultComboBoxModel) cbPortas.getModel();
        comboModel.removeAllElements();

        ArrayList<SerialCom> listas = controleAplicativo.getListaSerialCom();
        for (int i = 0; i < listas.size(); i++) {
            SerialCom com = listas.get(i);
            comboModel.addElement(com.getNome());
        }
    }

    //**************************************************************************
    //Seleciona porta COM
    private void selecionar() {
        
        Runnable rSeleciona = new Runnable(){
            public void run(){
                flagStatus = 1;
                habilitarSelecao(false);
                
                //Verifica se existe uma porta selecionada
                if(cbPortas.getSelectedItem() != (null)){
                    //Verifica se porta COM selecionada e valida
                    if (controleAplicativo.selecionarPorta((String) cbPortas.getSelectedItem()).equals("ok\r")) {
                        //Busca as configurações da remota
                        buscar();

                        //Ativar botões e campos
                        habilitar(true);
                        habilitarSelecao(false);
                        flagStatus = 2;
                    } else {
                        JOptionPane.showMessageDialog(null, "Porta Selecionada inválida!", "Alerta", JOptionPane.ERROR_MESSAGE);
                        habilitarSelecao(true);
                        flagStatus = 0;
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Nenhuma porta COM selecionada. Click em atualizar.",
                                "Alerta", JOptionPane.ERROR_MESSAGE);
                    habilitarSelecao(true);
                    flagStatus = 0;
                }
            }
        };
        tSeleciona = new Thread(rSeleciona);
        tSeleciona.start();
    }

    //**************************************************************************
    private void buscar() {
        limpar();
        //Busca valor atual configurado
        txtSlaveadd.setText(controleAplicativo.comando("get slaveadd"));
        txtInitialRegister.setText(controleAplicativo.comando("get initialregister"));
        txtInitialInput.setText(controleAplicativo.comando("get initialinput"));
        txtMaxpulses.setText(controleAplicativo.comando("get maxpulses"));
        txtRegSize.setText(controleAplicativo.comando("get regsize"));
        txtBaudrate.setText(controleAplicativo.comando("get baudrate"));
        txtStopBits.setText(controleAplicativo.comando("get stopbits"));
        txtParity.setText(controleAplicativo.comando("get parity"));
        txtFormat.setText(controleAplicativo.comando("get format"));
    }

    //**************************************************************************
    //Aplica a nova configuração
    private void alterar() {
        Runnable rAlterar = new Runnable(){
            public void run(){
                flagStatus = 1;
                 boolean verifica = true;
                 habilitar(false);

                //Verifica se textField não e nulo
                if (!txtSlaveadd.getText().trim().equals("")) {
                    if (!controleAplicativo.comando("set slaveadd " + txtSlaveadd.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set initialregister " + txtInitialRegister.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set initialinput " + txtInitialInput.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set regsize " + txtRegSize.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set maxpulses " + txtMaxpulses.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set baudrate " + txtBaudrate.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set stopbits " + txtStopBits.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set parity " + txtParity.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    if (!controleAplicativo.comando("set format " + txtFormat.getText().trim()).equals("ok\r")) {
                        verifica = false;
                    }
                    //Verifica-se todos os comandos foram enviado com sucesso
                    if (verifica) {
                        //verifica se as alterações foram salvas
                        if (!controleAplicativo.comando("save").equals("ok\r")) {   //Caso tenha um problema em salvar as configurações
                            JOptionPane.showMessageDialog(null, "Ocorreu um problema em salvar as configurações! Tente novamente.",
                                    "Alerta", JOptionPane.ERROR_MESSAGE);
                            controleAplicativo.fechar();
                        } else {    //Caso comando foi salvo na remota com sucesso
                            //Busca as configurações da remota
                            buscar();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ocorreu um problema em alterar as configurações! Tente novamente.",
                                "Alerta", JOptionPane.ERROR_MESSAGE);
                        controleAplicativo.fechar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Preencha campo corretamente.", "Alerta", JOptionPane.ERROR_MESSAGE);
                }
                habilitar(true);
                flagStatus = 2;
            }
        };
        tAlterar = new Thread(rAlterar);
        tAlterar.start();
        
    }
    
    /*
    private void alterar() {
        System.out.println(txtSlaveadd.getText().trim());
        System.out.println(txtInitialRegister.getText().trim());
        System.out.println(txtInitialInput.getText().trim());
        System.out.println(txtRegSize.getText().trim());
        System.out.println(txtMaxpulses.getText().trim());
        System.out.println(txtBaudrate.getText().trim());
        System.out.println(txtStopBits.getText().trim());
        System.out.println(txtParity.getText().trim());
        System.out.println(txtFormat.getText().trim());
    }
    */
    //**************************************************************************
    private void padrao() {
        Runnable rPadrao = new Runnable(){
            public void run(){
                flagStatus = 1;
                boolean verifica = true;
                habilitar(false);

                //Aplica a configuração padrão
                if (!controleAplicativo.comando("set slaveadd 1").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set initialregister 33").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set initialinput 1").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set maxpulses 999").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set regsize 2").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set baudrate 9600").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set stopbits 1").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set parity 0").equals("ok\r")) {
                    verifica = false;
                }
                if (!controleAplicativo.comando("set format bin").equals("ok\r")) {
                    verifica = false;
                }

                //Verifica-se todos os comandos foram enviado com sucesso
                if (verifica) {
                    //verifica se as alterações foram salvas
                    if (!controleAplicativo.comando("save").equals("ok\r")) {   //Caso tenha um problema em salvar as configurações
                        JOptionPane.showMessageDialog(null, "Ocorreu um problema em salvar as configurações! Tente novamente.",
                                "Alerta", JOptionPane.ERROR_MESSAGE);
                        controleAplicativo.fechar();
                    } else {    //Caso comando foi salvo na remota com sucesso
                        //Busca as configurações da remota
                        buscar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ocorreu um problema em alterar as configurações! Tente novamente.",
                            "Alerta", JOptionPane.ERROR_MESSAGE);
                    controleAplicativo.fechar();
                }
                habilitar(true);
                flagStatus = 2;
            }
        };
        tPadrao = new Thread(rPadrao);
        tPadrao.start();      
        
    }

    //**************************************************************************
    private void finalizar() {

        //Ativar e desativar botões e campos
        btnPadrao.setEnabled(false);
        btnAplicar.setEnabled(false);
        btnFinalizar.setEnabled(false);
        btnSelecionar.setEnabled(true);
        btnAtualizar.setEnabled(true);
        btnLeitura.setEnabled(false);
        txtSlaveadd.setEnabled(false);
        txtInitialRegister.setEnabled(false);
        txtInitialInput.setEnabled(false);
        txtMaxpulses.setEnabled(false);
        txtRegSize.setEnabled(false);
        txtBaudrate.setEnabled(false);
        txtStopBits.setEnabled(false);
        txtParity.setEnabled(false);
        txtFormat.setEnabled(false);
        cbPortas.setEnabled(true);
        
        //Finalizar comunicação com a porta COM
        controleAplicativo.fechar();

        //Status do programa
        flagStatus = 0;
    }

    //**************************************************************************
    private void limpar() {
        //Limpar os dados dos campos
        txtSlaveadd.setText(null);
        txtInitialRegister.setText(null);
        txtInitialInput.setText(null);
        txtMaxpulses.setText(null);
        txtRegSize.setText(null);
        txtBaudrate.setText(null);
        txtStopBits.setText(null);
        txtParity.setText(null);
        txtFormat.setText(null);
    }

    //**************************************************************************
    private void leitura(){
        habilitar(false);
        //Painel de leitura da remota
        Leitura leitura = new Leitura(this, true, controleAplicativo);
        leitura.setVisible(true);
        habilitar(true);
        flagStatus = 2;
    }
    
    //**************************************************************************
    private void status(){
        Runnable rStatus = new Runnable(){
            public void run(){
                String msg[] = {".", "..", "..."};
                for(int i = 0; ; i++){
                    if(i > 2) i = 0;      
                    if(flagStatus == 0)
                        lbStatus.setText("");
                    if(flagStatus == 1)
                        lbStatus.setText("Aguarde" + msg[i]);
                    if(flagStatus == 2)
                        lbStatus.setText("Concluído.");
                    //Tempo de espera
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        System.out.println("Erro na Thread de status do programa: " + ex);
                    }
                }
            }  
        };
        tStatus = new Thread(rStatus);
        tStatus.start();
    }
    
    //**************************************************************************
    private void habilitar(boolean op){
        txtSlaveadd.setEnabled(op);
        txtInitialRegister.setEnabled(op);
        txtInitialInput.setEnabled(op);
        txtMaxpulses.setEnabled(op);
        txtRegSize.setEnabled(op);
        txtBaudrate.setEnabled(op);
        txtStopBits.setEnabled(op);
        txtParity.setEnabled(op);
        txtFormat.setEnabled(op);
        btnFinalizar.setEnabled(op);
        btnAplicar.setEnabled(op);
        btnLeitura.setEnabled(op);
        btnPadrao.setEnabled(op);       
    }
    
    //**************************************************************************
    private void habilitarSelecao(boolean op){
        btnSelecionar.setEnabled(op);
        btnAtualizar.setEnabled(op);
        cbPortas.setEnabled(op);
    }
    
    //**************************************************************************

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAplicar;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JButton btnLeitura;
    private javax.swing.JButton btnPadrao;
    private javax.swing.JButton btnSelecionar;
    private javax.swing.JComboBox<String> cbPortas;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lbBaudrate;
    private javax.swing.JLabel lbFormat;
    private javax.swing.JLabel lbInitialinput;
    private javax.swing.JLabel lbInitialregister;
    private javax.swing.JLabel lbMaxpulses;
    private javax.swing.JLabel lbParity;
    private javax.swing.JLabel lbPorta;
    private javax.swing.JLabel lbRegsize;
    private javax.swing.JLabel lbSlaveadd;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JLabel lbStopbits;
    private javax.swing.JTextField txtBaudrate;
    private javax.swing.JTextField txtFormat;
    private javax.swing.JTextField txtInitialInput;
    private javax.swing.JTextField txtInitialRegister;
    private javax.swing.JTextField txtMaxpulses;
    private javax.swing.JTextField txtParity;
    private javax.swing.JTextField txtRegSize;
    private javax.swing.JTextField txtSlaveadd;
    private javax.swing.JTextField txtStopBits;
    // End of variables declaration//GEN-END:variables

}
